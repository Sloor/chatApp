{"version":3,"sources":["components/RoomList.js","components/Message.js","components/MessageList.js","components/SendMessageForm.js","components/NewRoomForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["RoomList","_ref","roomId","subscribeToRoom","rooms","orderedRooms","Object","toConsumableArray","sort","a","b","id","react_default","createElement","className","map","room","active","key","onClick","href","name","Message","username","text","MessageList","node","ReactDOM","findDOMNode","this","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","props","messages","message","index","components_Message","senderId","React","Component","SendMessageForm","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","target","value","handleSubmit","preventDefault","sendMessage","state","onSubmit","disabled","onChange","placeholder","type","NewRoomForm","roomName","HandleChange","bind","assertThisInitialized","HandleSubmit","createRoom","required","App","joinableRooms","joinedRooms","getRooms","_this2","tokenProvider","Chatkit","TokenProvider","url","ChatManager","instanceLocator","userId","connect","then","currentUser","catch","error","console","_this3","getJoinableRooms","err","log","concat","_this4","messageLimit","hooks","onMessage","_this5","components_RoomList","components_MessageList","components_SendMessageForm","components_NewRoomForm","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ca7cd1a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst RoomList = ({roomId, subscribeToRoom,rooms}) => {\r\n    const orderedRooms = [...rooms].sort((a,b)=> a.id-b.id )\r\n\r\n    return (\r\n        <div className=\"rooms-list\">\r\n            <h3> Your Rooms: </h3>\r\n            <ul>\r\n                \r\n                {\r\n                    orderedRooms.map((room)=> {\r\n                        const active = room.id === roomId? \"active\": \"\"\r\n                        return (\r\n                            <li key={room.id} className={'room ' + active}>\r\n                                <a onClick={()=> subscribeToRoom(room.id)} href='#'>{room.name}</a>\r\n                            </li>\r\n                        );\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoomList;","import React from 'react';\r\n\r\nconst Message = ({username,text}) => {\r\n\r\n    return (\r\n        \r\n        <div className='message'>\r\n            <div className=\"message-username\">{username}</div>\r\n            <div className=\"message-text\">{text}</div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Message from './Message';\r\n\r\nclass MessageList extends React.Component {\r\n    \r\n    componentWillUpdate() {\r\n        const node = ReactDOM.findDOMNode(this);\r\n        this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight;\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n        if(this.shouldScrollToBottom) {\r\n            const node = ReactDOM.findDOMNode(this);\r\n            node.scrollTop = node.scrollHeight;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.roomId) {\r\n            return (\r\n                <div className='message-list'>\r\n                    <div className='join-room'>\r\n                        &larr; Join a Room\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n     return (   \r\n        <div className='message-list'>\r\n            {this.props.messages.map((message,index)=>{\r\n                return (\r\n                    <Message key={index} username={message.senderId} text={message.text}/>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n        }\r\n}\r\n\r\nexport default MessageList;","import React from 'react';\r\n\r\nclass SendMessageForm extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            message: '',\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({message: e.target.value});\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.sendMessage(this.state.message);\r\n        this.setState({message: ''});\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"send-message-form\">\r\n                <input\r\n                    disabled={this.props.disabled}\r\n                    onChange={this.handleChange}\r\n                    value={this.state.message}\r\n                    placeholder=\"Type Your Message Then Hit 'ENTER'\"\r\n                    type=\"text\" />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SendMessageForm;","import React from 'react';\r\n\r\nclass NewRoomForm extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            roomName: ''\r\n        }\r\n        this.HandleChange = this.HandleChange.bind(this);\r\n        this.HandleSubmit = this.HandleSubmit.bind(this);\r\n        \r\n    }\r\n\r\n    HandleChange(e) {\r\n        this.setState({\r\n            roomName: e.target.value\r\n        })\r\n    }\r\n    HandleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.createRoom(this.state.roomName);\r\n        this.setState({roomName: ''})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"new-room-form\">\r\n                    <form onSubmit={this.HandleSubmit} >\r\n                        <input\r\n                            value={this.state.roomName}\r\n                            onChange={this.HandleChange}\r\n                            type=\"text\" \r\n                            placeholder=\"Create a New Room\" \r\n                            required />\r\n                        <button id=\"create-room-btn\" type=\"submit\">+</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default NewRoomForm;","import React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport RoomList from './components/RoomList';\nimport MessageList from './components/MessageList';\nimport SendMessageForm from './components/SendMessageForm';\nimport NewRoomForm from './components/NewRoomForm';\nimport { tokenProviderURL, instanceLocator } from './config';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      roomId: null,\n      messages : [],\n      joinableRooms: [],\n      joinedRooms: []\n    }\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribeToRoom = this.subscribeToRoom.bind(this);\n    this.getRooms = this.getRooms.bind(this);\n    this.createRoom = this.createRoom.bind(this);\n  }\n  componentDidMount() {\n    const tokenProvider = new Chatkit.TokenProvider({\n      url: tokenProviderURL\n    });\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator,\n      userId: \"Abd\",\n      tokenProvider\n    });\n    chatManager.connect()\n    .then(currentUser => {\n      this.currentUser = currentUser;\n      this.getRooms();\n    })\n    .catch(error => {\n      console.error(\"error connecting current user:\", error);\n    })\n  }\n  \n  getRooms(){\n    this.currentUser.getJoinableRooms()\n      .then(joinableRooms => {\n       this.setState({\n         joinableRooms,\n         joinedRooms: this.currentUser.rooms\n       })\n      })\n      .catch(err => {\n      console.log(`Error getting rooms: ${err}`)\n      })\n  }\n\n  subscribeToRoom(roomId){\n    this.setState({messages:[]})\n    this.currentUser.subscribeToRoom({\n      roomId: roomId,\n      messageLimit: 7,\n      hooks: {\n        onMessage: message => {\n          this.setState({messages: [...this.state.messages, message]})\n        }\n      }\n      \n    })\n    .then(room=>{\n      this.setState({\n        roomId: room.id\n      })\n      this.getRooms()\n    })\n    .catch(err=> {\n      console.log(`error on subscribing to room: ${err}`)\n    })\n  }\n\n   sendMessage(text) {\n    this.currentUser.sendMessage({\n      text,\n      roomId: this.state.roomId\n    });\n  }\n\n  createRoom(name) {\n    this.currentUser.createRoom({\n      name,\n      //private: true,\n      //addUserIds: ['asool'],\n      //customData: { foo: 42 },\n    }).then(room => {\n      this.subscribeToRoom(room.id);\n    })\n    .catch(err => {\n      console.log(`Error creating room ${err}`)\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"app\">\n        <RoomList \n        roomId={this.state.roomId}\n        subscribeToRoom={this.subscribeToRoom}\n        rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\n        />\n        <MessageList roomId={this.state.roomId} messages={this.state.messages}/>\n        <SendMessageForm disabled={!this.state.roomId} sendMessage={this.sendMessage}/>\n        <NewRoomForm createRoom={this.createRoom}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const tokenProviderURL = 'https://us1.pusherplatform.io/services/chatkit_token_provider/v1/1779003d-e49e-4ae8-bc8b-f186e19cd1f8/token';\r\nconst instanceLocator = 'v1:us1:1779003d-e49e-4ae8-bc8b-f186e19cd1f8';\r\n\r\nexport { tokenProviderURL, instanceLocator }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}